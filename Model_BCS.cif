// Body Comfort System
plant def U_CONFIGURATION():
uncontrollable activate, deactivate;
disc bool active in any;
    location: initial; marked;
    edge activate when not active do active:=true;
    edge deactivate when active do active:=false;
end

plant def UC_CONFIGURATION():
uncontrollable activate;
controllable deactivate;
disc bool active in any;
    location: initial; marked;
    edge activate when not active do active:=true;
    edge deactivate when active do active:= false;
end

plant def C_CONFIGURATION():
controllable activate, deactivate;
disc bool active in any;
    location: initial; marked;
    edge activate when not active do active:=true;
    edge deactivate when active do active:=false;
end

CONF:   UC_CONFIGURATION();   // Configuration
PROC:   C_CONFIGURATION();   // Process
CRAS:   U_CONFIGURATION();   // Crash
MAIN:   UC_CONFIGURATION();   // Maintenance
REPA:   C_CONFIGURATION();   // Repair
CALI:   C_CONFIGURATION();   // Calibration
RPW:    C_CONFIGURATION();   // Repair Power Window
RHMI:   C_CONFIGURATION();   // Repair Human Machine Interface
REM:    C_CONFIGURATION();   // Repair Exterior Mirror
CAS:    C_CONFIGURATION();   // Calibration Alarm System
CCLS:   C_CONFIGURATION();   // Calibration Central Locking System
CEM:    C_CONFIGURATION();   // Calibration Exterior Mirror

// FEATURE MODEL 1:
alg bool r1 = CONF.active;
alg bool r2 = (PROC.active <=> (not(CRAS.active) and not(MAIN.active) and CONF.active)) and
              (CRAS.active <=> (not(PROC.active) and not(MAIN.active) and CONF.active)) and
              (MAIN.active <=> (not(PROC.active) and not(CRAS.active) and CONF.active));
alg bool r3 = (REPA.active <=> (not(CALI.active) and MAIN.active));
alg bool r4 = (CALI.active <=> (not(REPA.active) and MAIN.active));
alg bool r5 = REPA.active <=> (RPW.active or RHMI.active or REM.active);
alg bool r6 = CALI.active <=> (CAS.active or CCLS.active or CEM.active);

alg bool sys_valid = r1 and r2 and r3 and r4 and r5 and r6;

plant automaton Validity:
    location: initial sys_valid; marked;
        edge CONF.activate when true;
        edge CONF.deactivate when false;
        edge PROC.activate when r1;
        edge CRAS.activate when r1;
        edge MAIN.activate when r1;
        edge REPA.activate when r1 and r2 and MAIN.active;
        edge CALI.activate when r1 and r2 and MAIN.active;

        edge RPW.activate when r1 and r2 and r3 and REPA.active;
        edge RHMI.activate when r1 and r2 and r3 and REPA.active;
        edge REM.activate when r1 and r2 and r3 and REPA.active;

        edge CAS.activate when r1 and r2 and r3 and CALI.active;
        edge CCLS.activate when r1 and r2 and r3 and CALI.active;
        edge CEM.activate when r1 and r2 and r3 and CALI.active;
end

plant automaton LED_Validity:
    location: initial sys_valid; marked;
        edge LED_EM_top.c_on when sys_valid;
        edge LED_EM_top.c_off when sys_valid;
        edge LED_EM_left.c_on when sys_valid;
        edge LED_EM_left.c_off when sys_valid;
        edge LED_EM_bottom.c_on when sys_valid;
        edge LED_EM_bottom.c_off when sys_valid;
        edge LED_EM_right.c_on when sys_valid;
        edge LED_EM_right.c_off when sys_valid;
        edge LED_PW_FP.c_on when sys_valid;
        edge LED_PW_FP.c_off when sys_valid;
        edge LED_PW_up.c_on when sys_valid;
        edge LED_PW_up.c_off when sys_valid;
        edge LED_PW_dn.c_on when sys_valid;
        edge LED_PW_dn.c_off when sys_valid;
        edge LED_EM_heating.c_on when sys_valid;
        edge LED_EM_heating.c_off when sys_valid;
        edge LED_CLS.c_on when sys_valid;
        edge LED_CLS.c_off when sys_valid;
        edge LED_AS_active.c_on when sys_valid;
        edge LED_AS_active.c_off when sys_valid;
        edge LED_AS_alarm.c_on when sys_valid;
        edge LED_AS_alarm.c_off when sys_valid;
        edge LED_AS_alarm_det.c_on when sys_valid;
        edge LED_AS_alarm_det.c_off when sys_valid;
        edge LED_AS_IM.c_on when sys_valid;
        edge LED_AS_IM.c_off when sys_valid;
end

// HMI LED Exterior Mirror
plant automaton LED_EM_top: // LED - Exterior Mirror - Top
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_EM_left:    // LED - Exterior Mirror - Left
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_EM_bottom:  // LED - Exterior Mirror - Bottom
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_EM_right:   // LED - Exterior Mirror - Right
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement LED_EM_top.c_on needs (not(CRAS.active or REM.active)) => (positionEM.EM_top or positionEM.EM_top_left or positionEM.EM_top_right);
requirement LED_EM_top.c_off needs (not(CRAS.active or REM.active)) => (positionEM.EM_hor_pending or positionEM.EM_hor_left or positionEM.EM_hor_right);

requirement LED_EM_left.c_on needs (not(CRAS.active or REM.active)) => (positionEM.EM_hor_left or positionEM.EM_top_left or positionEM.EM_bottom_left);
requirement LED_EM_left.c_off needs (not(CRAS.active or REM.active)) => (positionEM.EM_hor_pending or positionEM.EM_bottom or positionEM.EM_top);

requirement LED_EM_bottom.c_on needs (not(CRAS.active or REM.active)) => (positionEM.EM_bottom or positionEM.EM_bottom_left or positionEM.EM_bottom_right);
requirement LED_EM_bottom.c_off needs (not(CRAS.active or REM.active)) => (positionEM.EM_hor_pending or positionEM.EM_hor_left or positionEM.EM_hor_right);

requirement LED_EM_right.c_on needs (not(CRAS.active or REM.active)) => (positionEM.EM_hor_right or positionEM.EM_top_right or positionEM.EM_bottom_right);
requirement LED_EM_right.c_off needs (not(CRAS.active or REM.active)) => (positionEM.EM_hor_pending or positionEM.EM_bottom or positionEM.EM_top);

// LED Finger Protection

plant automaton LED_PW_FP:  // LED - Power Window - Finger Protection
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement LED_PW_up.c_on needs (not(CRAS.active or RPW.active)) => fingerPW.On;
requirement LED_PW_up.c_off needs (not(CRAS.active or RPW.active)) => fingerPW.Off;

// LED Power Window

plant automaton LED_PW_up:  // LED - Power Window - Up
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_PW_dn:  // LED - Power Window - Down
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement LED_PW_up.c_on needs (not(CRAS.active or RPW.active)) => motorPW.Up;
requirement LED_PW_up.c_off needs (not(CRAS.active or RPW.active)) =>  motorPW.Idle;
requirement LED_PW_dn.c_on needs (not(CRAS.active or RPW.active)) => motorPW.Down;
requirement LED_PW_dn.c_off needs (not(CRAS.active or RPW.active)) => motorPW.Idle;

// LED Exterior Mirror Heating
plant automaton LED_EM_heating: // LED - Exterior Mirror - Heating
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement LED_EM_heating.c_on needs (not(CRAS.active or REM.active)) => EM_heating.On;
requirement LED_EM_heating.c_off needs (not(CRAS.active or REM.active)) => EM_heating.Off;

// LED Central locking
plant automaton LED_CLS:    // LED - Central Locking System
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement LED_CLS.c_on needs not(CRAS.active or CCLS.active) => CLS.Locked;
requirement LED_CLS.c_off needs not(CRAS.active or CCLS.active) => CLS.Unlocked;

// LED Alarm System

plant automaton LED_AS_active:  // LED - Alarm System active
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_AS_alarm:   // LED - Alarm System alarm
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_AS_alarm_det:   // LED - Alarm System - Alarm det
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

plant automaton LED_AS_IM:  // LED - Alarm System - Interior Monitoring
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement LED_AS_active.c_on needs not(CRAS.active or CAS.active) => AlarmSystem.Activated;
requirement LED_AS_active.c_off needs not(CRAS.active or CAS.active) => AlarmSystem.Deactivated;

requirement LED_AS_alarm.c_on needs not(CRAS.active or CAS.active) => AlarmSystem.On;
requirement LED_AS_alarm.c_off needs not(CRAS.active or CAS.active) => AlarmSystem.Activated;

requirement LED_AS_alarm_det.c_on needs not(CRAS.active or CAS.active) => AlarmSystem.Alarm_detected;
requirement LED_AS_alarm_det.c_off needs not(CRAS.active or CAS.active) => AlarmSystem.On;

requirement LED_AS_IM.c_on needs not(CRAS.active or CAS.active) => InteriorMonitoring.On;
requirement LED_AS_IM.c_off needs not(CRAS.active or CAS.active) => InteriorMonitoring.Off;

// ECU Door system

plant automaton PW_Validity:
    location: initial sys_valid; marked;
        edge buttonPW.u_up when sys_valid;
        edge buttonPW.u_down when sys_valid;
        edge buttonPW.u_released when sys_valid;
        edge sensorPW.u_up when sys_valid;
        edge sensorPW.u_down when sys_valid;
        edge sensorPW.u_inBetween when sys_valid;
        edge fingerPW.u_fingerDetected when sys_valid;
        edge fingerPW.c_fingerReleased when sys_valid;
        edge motorPW.c_up when sys_valid;
        edge motorPW.c_down when sys_valid;
        edge motorPW.c_off_dn when sys_valid;
        edge motorPW.c_off_up when sys_valid;
end

//Power Window

plant automaton buttonPW:   // Button Power Window
    uncontrollable u_up, u_down, u_released;
    location Idle:
        initial; marked;
        edge u_up goto Up;
        edge u_down goto Down;
    location Down:
        edge u_released goto Idle;
        edge u_up goto Up;
    location Up:
        edge u_released goto Idle;
        edge u_down goto Down;
end

plant automaton sensorPW:   // Sensor Power Window
    uncontrollable u_up, u_down, u_inBetween;
    location InBetween:
        edge u_up goto Up;
        edge u_down goto Down;
    location Up:
        initial; marked;
        edge u_inBetween goto InBetween;
    location Down:
        edge u_inBetween goto InBetween;
end

plant automaton fingerPW:   // Finger Protection Power Window: MANDATORY -> Power Window
    uncontrollable u_fingerDetected;
    controllable c_fingerReleased;
    location Off:
    initial;marked;
    edge u_fingerDetected goto On;
    location On:
    edge c_fingerReleased goto Off;
end

plant automaton motorPW:    // Motor Power Window
    controllable c_up, c_down, c_off_dn, c_off_up;
    location Idle:
        initial;marked;
        edge c_up goto Up;
        edge c_down goto Down;
    location Up:
        edge c_up;
        edge c_off_up goto Idle;
        edge CLS.c_lock goto Up_CLS;
    location Up_CLS:    // Up - Central Locking System
        edge CLS.c_unlock goto Up;
    location Down:
        edge c_off_dn goto Idle;
        edge c_down;
        edge CLS.c_lock goto Down_CLS;
    location Down_CLS:  // Down - Central Locking System
        edge CLS.c_unlock goto Down;
end

// Requirements
requirement motorPW.c_up needs not(RPW.active) => (buttonPW.Up or RCK_PW.Up);
requirement motorPW.c_up needs not(RPW.active) => fingerPW.Off;
requirement motorPW.c_up needs not(RPW.active) => not sensorPW.Up;

requirement motorPW.c_down needs not(CRAS.active or RPW.active) => buttonPW.Down  or RCK_PW.Down;
requirement motorPW.c_down needs not(CRAS.active or RPW.active) => fingerPW.Off;
requirement motorPW.c_down needs not(CRAS.active or RPW.active) => (not sensorPW.Down);

requirement motorPW.c_off_dn needs not(CRAS.active or RPW.active) => (fingerPW.On or buttonPW.Idle or sensorPW.Down);

requirement motorPW.c_off_up needs not(CRAS.active or RPW.active) => (fingerPW.On or buttonPW.Idle or sensorPW.Up);

requirement fingerPW.c_fingerReleased needs buttonPW.Down;

// Exterior Mirror

plant automaton EM_Validity:
    location: initial sys_valid; marked;
        edge buttonEM.u_up when sys_valid;
        edge buttonEM.u_down when sys_valid;
        edge buttonEM.u_left when sys_valid;
        edge buttonEM.u_right when sys_valid;
        edge buttonEM.u_released when sys_valid;
        edge positionEM.u_pos_top when sys_valid;
        edge positionEM.u_pos_down when sys_valid;
        edge positionEM.u_pos_left when sys_valid;
        edge positionEM.u_pos_right when sys_valid;
        edge positionEM.u_rel_top when sys_valid;
        edge positionEM.u_rel_down when sys_valid;
        edge positionEM.u_rel_left when sys_valid;
        edge positionEM.u_rel_right when sys_valid;
        edge motorEM.c_left when sys_valid;
        edge motorEM.c_right when sys_valid;
        edge motorEM.c_up when sys_valid;
        edge motorEM.c_down when sys_valid;
        edge motorEM.c_off when sys_valid;
        edge EM_temp_time.u_lowtemp when sys_valid;
        edge EM_temp_time.u_done when sys_valid;
        edge EM_heating.c_on when sys_valid;
        edge EM_heating.c_off when sys_valid;
end

plant automaton buttonEM:   // Button Exterior Mirror: afstellen vd buitenspiegel
    uncontrollable u_up, u_down, u_left, u_right, u_released;
    location Idle:marked;initial;
        edge u_up goto Up;
        edge u_down goto Down;
        edge u_left goto Left;
        edge u_right goto Right;
    location Up:
        edge u_released goto Idle;
    location Down:
        edge u_released goto Idle;
    location Left:
        edge u_released goto Idle;
    location Right:
        edge u_released goto Idle;
end

plant automaton positionEM:     // Position Exterior Mirror: Sensor die positie spiegel meet?
    uncontrollable u_pos_top, u_pos_down, u_pos_left, u_pos_right;
    uncontrollable u_rel_top, u_rel_down, u_rel_left, u_rel_right;
    location EM_hor_pending:
        initial;marked;
        edge u_pos_top goto EM_top;
        edge u_pos_down goto EM_bottom;
        edge u_pos_left goto EM_hor_left;
        edge u_pos_right goto EM_hor_right;
    location EM_top:
        edge u_pos_left goto EM_top_left;
        edge u_pos_right goto EM_top_right;
        edge u_rel_top goto EM_hor_pending;
    location EM_top_left:
        edge u_rel_top goto EM_hor_left;
        edge u_rel_left goto EM_top;
    location EM_top_right:
        edge u_rel_top goto EM_hor_right;
        edge u_rel_right goto EM_top;
    location EM_bottom:
        edge u_rel_down goto EM_hor_pending;
        edge u_pos_left goto EM_bottom_left;
        edge u_pos_right goto EM_bottom_right;
    location EM_bottom_left:
        edge u_rel_down goto EM_hor_left;
        edge u_rel_left goto EM_bottom;
    location EM_bottom_right:
        edge u_rel_down goto EM_hor_right;
        edge u_rel_right goto EM_bottom;
    location EM_hor_left:
        edge u_rel_left goto EM_hor_pending;
    location EM_hor_right:
        edge u_rel_right goto EM_hor_pending;
end

plant automaton motorEM:    // Motor Exterior Mirror
    controllable c_left, c_right, c_up, c_down, c_off;
    location Idle:initial; marked;
        edge c_left goto Left;
        edge c_right goto Right;
        edge c_up goto Up;
        edge c_down goto Down;
    location Left:
        edge c_off goto Idle;
    location Right:
        edge c_off goto Idle;
    location Up:
        edge c_off goto Idle;
    location Down:
        edge c_off goto Idle;
end

requirement motorEM.c_left needs not(REM.active or CEM.active) => not(positionEM.EM_hor_left or positionEM.EM_top_left or positionEM.EM_bottom_left);
requirement motorEM.c_right needs not(REM.active or CEM.active) => not(positionEM.EM_hor_right or positionEM.EM_top_right or positionEM.EM_bottom_right);
requirement motorEM.c_up needs not(REM.active or CEM.active) => not(positionEM.EM_top or positionEM.EM_top_right or positionEM.EM_top_left);
requirement motorEM.c_down needs not(REM.active or CEM.active) => not(positionEM.EM_bottom or positionEM.EM_bottom_right or positionEM.EM_bottom_left);

requirement motorEM.c_left needs not(REM.active or CEM.active) => buttonEM.Left or RCK_EM.Left;
requirement motorEM.c_right needs not(REM.active or CEM.active) => buttonEM.Right or RCK_EM.Right;
requirement motorEM.c_up needs not(REM.active or CEM.active) => buttonEM.Up or RCK_EM.Up;
requirement motorEM.c_down needs not(REM.active or CEM.active) => buttonEM.Down or RCK_EM.Down;
requirement motorEM.c_off needs not(REM.active or CEM.active) => buttonEM.Idle or RCK_EM.Idle;

// Electric mirror heating
plant automaton EM_temp_time:   // Exterior mirror: temperatuur
    uncontrollable u_lowtemp, u_done;
    location Heating_off:initial;marked;
        edge u_lowtemp goto Heating_on;//Temp too low
    location Heating_on:
        edge u_done goto Heating_off;//Time elapsed
end

plant automaton EM_heating:     // Exterior mirror: heating
    controllable c_on, c_off;
    location Off:initial;marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
end

requirement EM_heating.c_on needs not(CRAS.active or REM.active) and EM_temp_time.Heating_on;
requirement EM_heating.c_on needs not(CRAS.active or REM.active) and EM_temp_time.Heating_off;


// ECU Alarm System
plant automaton AS_Validity:
    location: initial sys_valid; marked;
        edge AlarmSystem.c_on when sys_valid;
        edge AlarmSystem.c_off when sys_valid;
        edge AlarmSystem.c_deactivated when sys_valid;
        edge AlarmSystem.c_activated when sys_valid;
        edge AlarmSystem.c_IM_detected when sys_valid;
        edge AlarmSystem.u_detected when sys_valid;
        edge AlarmSystem.u_time_elapsed when sys_valid;
        edge InteriorMonitoring.u_detected when sys_valid;
        edge InteriorMonitoring.u_clear when sys_valid;
        edge InteriorMonitoring.c_on when sys_valid;
        edge InteriorMonitoring.c_off when sys_valid;
end

plant automaton AlarmSystem:
    controllable c_on, c_off,c_deactivated, c_activated, c_IM_detected;
    uncontrollable u_detected, u_time_elapsed;
    location Deactivated:
        edge c_activated goto Activated;
    location Activated:
        initial;marked;
        edge c_on goto On;
        edge c_deactivated goto Deactivated;
    location On:
        edge c_off goto Activated;
        edge u_detected goto Alarm_detected;
        edge c_IM_detected goto Alarm_detected;
    location Alarm_detected:
        edge c_off goto Activated;
        edge u_time_elapsed goto On;
end

plant automaton InteriorMonitoring: // additional feature besides Alarm System
    uncontrollable u_detected, u_clear;
    controllable c_on, c_off;
    location Off:
    initial; marked;
        edge c_on goto On;
    location On:
        edge c_off goto Off;
        edge u_detected goto Detected;
    location Detected:
        edge u_clear goto On;
        edge c_off goto Off;
end

requirement AlarmSystem.c_on needs not(CAS.active) => (Key_lock.Locked or RCK_CLS.Locked);
requirement AlarmSystem.c_off needs not(CRAS.active or CAS.active) => (Key_lock.Unlocked or RCK_CLS.Unlocked);
requirement AlarmSystem.c_deactivated needs not(CRAS.active or CAS.active) => (Key_lock.Unlocked or RCK_CLS.Unlocked or CRAS.active);

requirement AlarmSystem.c_IM_detected needs not(CAS.active) => InteriorMonitoring.Detected;
requirement InteriorMonitoring.c_off needs not(CAS.active) => (Key_lock.Unlocked or RCK_CLS.Unlocked or CRAS.active);

// ECU Central Locking System (CLS)
plant automaton CLS_Validity:
    location: initial sys_valid; marked;
        edge Key_lock.u_lock when sys_valid;
        edge Key_lock.u_unlock when sys_valid;
        edge CLS.c_lock when sys_valid;
        edge CLS.c_unlock when sys_valid;
        edge Auto_lock.u_drive_lock when sys_valid;
        edge Auto_lock.u_door_open_unlock when sys_valid;
end

plant automaton Key_lock:
    uncontrollable u_lock, u_unlock;
    location Unlocked:
    initial;marked;
        edge u_lock goto Locked;
    location Locked:
        edge u_unlock goto Unlocked;
end

plant automaton CLS:    //Central Locking System
    controllable c_lock, c_unlock;
    location Unlocked:
    initial;marked;
        edge c_lock goto Locked;
    location Locked:
    initial;marked;
        edge c_unlock goto Unlocked;
end

plant automaton Auto_lock:
    uncontrollable u_drive_lock, u_door_open_unlock;
    location Unlocked:
    initial;marked;
        edge u_drive_lock goto Locked; //When car starts driving
    location Locked:
    initial;marked;
        edge u_door_open_unlock goto Unlocked;
end

requirement CLS.c_lock needs not(CCLS.active) => (Key_lock.Locked or RCK_CLS.Locked or Auto_lock.Locked);
requirement CLS.c_unlock needs not(CCLS.active) => (Key_lock.Unlocked or RCK_CLS.Unlocked or CRAS.active);

//RCK Modelling
plant automaton RCK_Validity:
    location: initial sys_valid; marked;
        edge RCK_CLS.u_lock when sys_valid;
        edge RCK_CLS.u_unlock when sys_valid;
        edge Safety_fcn.u_time_elapsed_lock when sys_valid;
        edge Safety_fcn.u_door_open when sys_valid;
        edge Safety_fcn.c_locked when sys_valid;
        edge Safety_fcn.c_unlock when sys_valid;
        edge RCK_PW.u_up when sys_valid;
        edge RCK_PW.u_down when sys_valid;
        edge RCK_PW.u_released when sys_valid;
        edge RCK_EM.u_up when sys_valid;
        edge RCK_EM.u_down when sys_valid;
        edge RCK_EM.u_left when sys_valid;
        edge RCK_EM.u_right when sys_valid;
        edge RCK_EM.u_released when sys_valid;
end

plant automaton RCK_CLS:    // Remote Control Key - Central Locking System
    uncontrollable u_lock, u_unlock;
    location Unlocked:
    initial;marked;
        edge u_lock goto Locked;
    location Locked:
    initial;marked;
        edge u_unlock goto Unlocked;
end

plant automaton Safety_fcn: // Safety Function
    uncontrollable u_time_elapsed_lock, u_door_open;
    controllable c_locked, c_unlock;
    location Idle:
    initial;marked;
        edge c_unlock goto Unlocked_RCK;
    location Unlocked_RCK:
    marked;
        edge u_time_elapsed_lock goto AutoLocking;// When t>timeout
        edge u_door_open goto Idle; // When t<timeout
    location AutoLocking:
        edge CLS.c_lock goto Idle;
end

plant automaton RCK_PW:     //Remote Control Key - Power Window
    uncontrollable u_up, u_down, u_released;    // Raam omhoog/omlaag
    location Idle:
    initial;marked;
        edge u_up goto Up;
        edge u_down goto Down;
    location Up:
        edge u_released goto Idle;
    location Down:
        edge u_released goto Idle;
end

plant automaton RCK_EM:     //Remote Control key - Electric mirror
    uncontrollable u_up, u_down, u_left, u_right, u_released;   // Afstellen spiegel links/rechts/omhoog/omlaag
    location Idle:marked;initial;
        edge u_up goto Up;
        edge u_down goto Down;
        edge u_left goto Left;
        edge u_right goto Right;
    location Up:
        edge u_released goto Idle;
    location Down:
        edge u_released goto Idle;
    location Left:
        edge u_released goto Idle;
    location Right:
        edge u_released goto Idle;
end

requirement Safety_fcn.c_unlock needs RCK_CLS.Unlocked;
